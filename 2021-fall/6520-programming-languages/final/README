# Final Assignment

Below I detail which of the additions I made to the language and what decisions I made to implement them.

### Casting

I added casting by using some logic from homework #9 to add inheritance hints to the class.rkt file (that deals with Exps, not ExpIs). The inheritance hints allow that layer to determine if the Exp to cast is the same type or a subtype of the symbol passed in. The logic is almost identical to homework #9, where we were checking for instanceof.

For the type system, I set it up as requested. The type checker doesn't complain if the expression is a sub or super type of the symbol. This means the type system allows things that could break, but the interpreter will catch them.

### if0

I added an if0 form to all layers of the language (except typed-parse). The implementation of interp was pretty standard, even with the inheritance layers. The main trickiness came when I implemented the type checking in my least upper bound function, lub. I fixed one class and then tested each super type of the other class until there was a match or we ran out of classes to check. If there was a match (is-subtype was true), I returned the parent that was the least upper bound. This works because one of the parent classes must be a parent type for both object. Since lub was the hard part, most of my testing is in typed-class.

### Null

I added a nullE and a nullV, and interpreting a nullE makes a nullV. I didn't update the error message in getE or sendE, since a null is technically "not an object". I implemented the inheritance by just casting down to a lower level and parsing was pretty easy with a null being \`null.

For type checking, it was slightly more complicated. I added a nullT type and made nullT a subtype of objT (while making sure objT was not a subtype of nullT). This allows using null as an argument where an object is expected. For testing, I added the 'factory12 method from the class layer to the typed-class layer and made sure that it allowed nullT and objT as argument values. I also made sure I could pass in a null where the objT was expected in the square class.

### Java-style arrays

To implement the list in an imperative style, I made a new Value, arrV, which has one property, a Listof Boxof Value. Having each entry be a box means that I can update the value inside the box without needing to copy the array each time, thus it should be imperative. The tests I wrote make an argument that is reused after calling set, and the updated values are where they should be. I use this in arrayset along with a set-box! to update the value. To make this compatible with the other methods and helpers, I use box and unbox. Speaking of the other methods, newarray and arrayref, I used helpers called gen-list and update-entry to implement them. The gen-list helper just does adds on a box with the initial value as many times as requested and the update-entry finds the right box and updates it. I added guards for making sure the index is in the range of the array for all the methods. The changes to the inheritance layers were straightforward. I do throw out the type information for interpreting, since it's not used.

I amended the type checker code so that parse type was available in the typed-class file. I couldn't think of a way to parse the type that's passed in without creating a circular import where the inherit parse would then require all the type information for it to be passed all the way down to the class layer. The types for the array are all determined in the typechecker and are left our of the other layers. I'm assuming that type checking happens before the program runs and would reject the code if there was a type issue.

That said, they types are:

- (arrT TYPE) where type is another type for newarray
- TYPE for arrayref
- numT for arrayset, since it returns 0

### Array sub-typing

The changes for this were relatively minor. I just extended the type checker to allow arrT sub-typing as described in the question. I also added a run time check that the type of the class for an object is a subtype of the objects in the list. This should satisfy the second requirement, although the type checker would already catch these issues. For example, the type checker allows putting a Posn3D where a Posn should go, but not the opposite way.

## Total stars earned (in order of implementation)
- (#1 1 star) casting
- (#2 2 stars) if0
- (#8 2 stars) null
- (#6 3 stars) java-style arrays
- (#7 2 stars) array sub-typing

Total 10 stars
